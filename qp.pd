our $VERSION = 0.01;

use PDL::Exporter;

pp_setversion(0.01);

# Cargo culted from PDL::Opt::NonLinear
pp_addhdr('
pdl    *pdl1, *pdl2, *pdl3, *pdl4, *pdl5;
SV    *sv_pdl1, *sv_pdl2, *sv_pdl3, *sv_pdl4, *sv_pdl5;
#include <math.h>
#include <stdio.h>
#include <string.h>
/* Change names when fixing glibc-2.1 bug */
#ifdef MY_FIXY0
#define y0(a) fixy0(a)
extern double fixy0(double a);
#endif
#ifdef MY_FIXYN
#define yn(a,b) fixyn(a,b)
extern double fixyn(int a, double b);
#endif
');

## handle various cases of 'finite'
#
if ($^O =~ /MSWin/) {
# _finite in VC++ 4.0
pp_addhdr('
#define finite _finite
#include <float.h>
/* avoid annoying warnings */
typedef long int logical;
typedef long int integer;
typedef long int ftnlen;
#ifdef __cplusplus
typedef float (*paramf)(...);
typedef double (*paramd)(...);
typedef void (*paramv)(...);
#else
typedef float (*paramf)();
typedef double (*paramd)();
typedef void (*paramv)();
#endif
');
} else {
pp_addhdr('
/* avoid annoying warnings */
typedef int logical;
typedef int integer;
typedef int ftnlen;
#ifdef __cplusplus
typedef float (*paramf)(...);
typedef double (*paramd)(...);
typedef void (*paramv)(...);
#else
typedef float (*paramf)();
typedef double (*paramd)();
typedef void (*paramv)();
#endif
')
}

pp_addpm({At=>'Top'},<<'EOD');
use strict;
use PDL::Ufunc;
use PDL::Ops;
use PDL::NiceSlice;

{ 
  package PDL;
  use UNIVERSAL 'isa'; # need that later in info function
  use Carp;
}


=head1 NAME

PDL::Opt::QP - ....

=head1 SYNOPSIS

 use PDL::Opt::QP;
 ...

=head1 DESCRIPTION

...

=cut

EOD

# Fortran function signature:
#  subroutine qpgen2( ->dmat, ->dvec, fddmat, n, <-sol, <-lagr, 
#      <-crval, ->amat, ->bvec, fdamat, q, ->meq, <-iact, <-nact,
#      <-iter, work, <->ierr)  
#  integer n, i, j, l, l1, 
# *     info, q, iact(*), iter(*), it1,
# *     ierr, nact, iwzv, iwrv, iwrm, iwsv, iwuv, nvl,
# *     r, fdamat, iwnbv, meq, fddmat
#  double precision dmat(fddmat,*), dvec(*), lagr(*), sol(*), bvec(*)
# $     ,work(*), temp, sum, t1, tt, gc, gs, crval,nu, amat(fdamat,*)
# $     , vsmall, tmpa, tmpb

pp_def("qpgen2",
    HandleBad => 0,
    Pars => 'dmat(m,m); dvec(m); int fddmat(); int n();
        [o]sol(m); [o]lagr(q); [o]crval();
        amat(m,q); bvec(q); int fdamat(); int q(); int meq();
        int [o]iact(q); int [o]nact();
        int [o]iter(s=2); [t]work(z); int [io]ierr();
    ',
    GenericTypes => [D],
    Code => '
        extern int qpgen2_(
            double *dmat, double *dvec, integer *fddmat, integer *n,

            double *sol, double *lagr, double *crval, double *amat,
            double *bvec, integer *fdamat, integer *q, integer *meq,
            integer *iact, integer *nact, integer *iter, double *work,
            integer *ierr
        );

        qpgen2_(
            $P(dmat),
            $P(dvec),
            $P(fddmat),
            $P(n),
            $P(sol),
            $P(lagr),
            $P(crval),
            $P(amat),
            $P(bvec),
            $P(fdamat),
            $P(q),
            $P(meq),
            $P(iact),
            $P(nact),
            $P(iter),
            $P(work),
            $P(ierr)
        );

        // Not sure if we will need to process the solutions here
        // for (i = 0; i < $SIZE(n); i++)
        //  $x(n=>i) = xtmp[i];
        // $maxit()=it;
',
    Doc => q{

=for ref

This routine solves the quadratic programming optimization problem

           minimize  f(x) = 0.5 x' D x  -  d' x
              x

    optionally constrained by:

            A' x  = a
            B  x >= b


.... more docs to come ....
});

pp_add_exported('', 'qp');
pp_addpm({At=>'Bot'},<<'EOD');

sub qp {
  my ($Dmat, $dvec, $Amat, $bvec, $meq) = @_;

  my $n = $Dmat->dim(1);    # D is an [n x n] matrix
  my $q = $Amat->dim(0);    # A is an [n x q] matrix

  if( ! defined $bvec ){    # if b is undef, create it
    $bvec = zeros($q);
  }

  die("Dmat is not square!")
    if $n != $Dmat->dim(0);               # Check D is [n x n]
  die("Dmat and dvec are incompatible!")
    if $n != $dvec->nelem;                # Check d is [n]
  die("Amat and dvec are incompatible!")
    if $n != $Amat->dim(1);               # Check A is [n x _]
  die("Amat and bvec are incompatible!")
    if $q != $bvec->nelem;                # Check A is [_ x q]
  die("Value of meq is invalid!")
    if ($meq > $q) || ($meq < 0 );

  my $iact = zeros($q);              # Store which constraints are active
  my $nact = pdl(0);                 # Store number of active constraints
  my $r    = $n < $q ? $n : $q;      # Used to size work space
  my $sol  = zeros($n);              # Store the solution [n]
  my $lagr = zeros($q);              # Store the Lagranges for the constraints
  my $crval= pdl(0);                 # Value at min
  my $work = zeros(2*$n+$r*($r+5)/2+2*$q+1);  # Work space
  my $iter = zeros(2);               # Store info about interations
  my $ierr = pdl(0);                 # Input: 1=Factorized; Output: error flag

  my $res = qpgen2(
                   $Dmat, $dvec,
                   $n, $n,
                   $sol, $lagr,
                   $crval,
                   $Amat, $bvec, $n,
                   $q, $meq,
                   $iact, $nact,
                   $iter, $work,
                   $ierr
        );

  warn "### res = $res ###\n";

  # TODO: process/return the results
  #
  # From R implementation:
  # if( res1$ierr == 1)
  #   stop("constraints are inconsistent, no solution!")
  # else if( res1$ierr == 2)
  #   stop("matrix D in quadratic function is not positive definite!")
  #
  # list(solution=res1$sol,
  #      value=res1$crval,
  #      unconstrained.solution=res1$dvec,
  #      iterations=res1$iter,
  #      Lagrangian = res1$lagr,
  #      iact=res1$iact[1:res1$nact])   
}
EOD

# Not sure if this is needed?
pp_add_boot(<<EOB);
   pdl1 = PDL->pdlnew();
   pdl2 = PDL->pdlnew();
   pdl3 = PDL->pdlnew();
   pdl4 = PDL->pdlnew();
   pdl5 = PDL->pdlnew();
   sv_pdl1 = newSV(0);
   sv_pdl2 = newSV(0);
   sv_pdl3 = newSV(0);
   sv_pdl4 = newSV(0);
   sv_pdl5 = newSV(0);
   PDL->SetSV_PDL(sv_pdl1, pdl1);
   PDL->SetSV_PDL(sv_pdl2, pdl2);
   PDL->SetSV_PDL(sv_pdl3, pdl3);
   PDL->SetSV_PDL(sv_pdl4, pdl4);
   PDL->SetSV_PDL(sv_pdl5, pdl5);
EOB

pp_done();  # you will need this to finish pp processing

